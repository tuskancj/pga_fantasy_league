---
title: "Manual DFS Golfer Board Upload"
author: "C.J. Tuskan"
date: last-modified
subtitle: "Testing"
format: html
editor: visual
df-print: kable
embed-resources: true
execute: 
  echo: true
toc: true
---

# Setup and Connection to Various Databases

-   Statistics are pulled from DataGolf.com database and processed
-   Data is then uploaded to AWS Postgre SQL database

```{r}
#variables
payout <- 15.51

#setup
suppressWarnings(suppressPackageStartupMessages({
  library(tidyverse)
  library(ggplot2)
  library(janitor)
  library(askpass)
  library(jsonlite)
  library(lubridate)
  library(DBI)
  library(RPostgres)
}))

#source db info
source('../db_creds.R')

#color set
color_cjt <- c('#F1C40F', '#34495E', '#95A5A6')

# #Data Golf api key
# api_key <- askpass('API key:  ')
# 
# #connect to AWS Postgres RDB
# host <- askpass('AWS host:  ')
# port <- 5432
# dbname <- 'postgres'
# user <- askpass('AWS Postgres username:  ')
# password <- askpass('AWS Postgres password:  ')

# Establish a connection
conn <- dbConnect(
  drv = RPostgres::Postgres(),
  dbname = dbname,
  host = host,
  port = port,
  user = user,
  password = password
)

# Check the connection
if (!is.null(conn)) {
  print("Connection successful!")
} else {
  print("Connection failed!")
}

#list tables of db
# dbListTables(conn)
```

# Glimpse of Historical PGA Events from DataGolf.com

This database is updated after each PGA contest.

```{r}
df_hist <- fromJSON(paste('https://feeds.datagolf.com/historical-raw-data/event-list?file_format=json&key=', api_key, sep = '')) %>% mutate(date = as.Date(date)) %>% clean_names()
df_hist %>% filter(tour == 'pga', calendar_year == 2025) %>% arrange(desc(date))
```

# Glimpse of DFS Events Uploaded to AWS

The data from DataGolf.com should be pulled, processed, and uploaded to AWS on a weekly basis. Verify that the DFS events exist in AWS prior to manually uploading DFS league member picks.

```{r}
dbGetQuery(conn, "select * from event where calendar_year = 2025") %>% arrange(desc(date))
```

# Glimpse Last DFS Board Uploaded
```{r}
df <- dbGetQuery(conn, "
           SELECT
          	ACCOUNT.USERNAME AS USERNAME,
          	EVENT.EVENT_NAME,
          	EVENT.EVENT_ID,
          	EVENT.ID_EVENT,
          	EVENT.DATE,
          	EVENT.CALENDAR_YEAR,
          	ROUND(SUM(DFS.TOTAL_PTS)::NUMERIC, 1) AS TOTAL_PTS
          FROM
          	DFS_BOARD
          	INNER JOIN ACCOUNT ON ACCOUNT.ID_ACCOUNT = DFS_BOARD.ID_ACCOUNT
          	INNER JOIN DFS_TOTAL AS DFS ON DFS.ID_DFS IN (
          		DFS_BOARD.ID_DFS_1,
          		DFS_BOARD.ID_DFS_2,
          		DFS_BOARD.ID_DFS_3,
          		DFS_BOARD.ID_DFS_4,
          		DFS_BOARD.ID_DFS_5,
          		DFS_BOARD.ID_DFS_6
          	)
          	INNER JOIN EVENT ON EVENT.ID_EVENT = DFS.ID_EVENT
          GROUP BY
          	ACCOUNT.USERNAME,
          	EVENT.EVENT_NAME,
          	EVENT.CALENDAR_YEAR,
          	EVENT.EVENT_ID,
          	EVENT.ID_EVENT,
          	EVENT.DATE
          ORDER BY
          	DATE DESC, TOTAL_PTS DESC
           ")
df
df %>% group_by(event_name, event_id, id_event, date) %>% summarize(entry_count = length(username)) %>% arrange(desc(date)) %>% head(1)
```
```{r}
print(paste('The last contest uploaded was Contest ', as.character(length(unique(df$event_id))), sep = ''))
```


# Load DFS Boards

Manually input the year, DataGolf event id, and filename information:

```{r}
year <- 2025
event <- 480
selected_file = '16_board.csv'

#compile filepath - do not edit
dir <- paste('../dfs_boards/', year, '/', sep = '')
selected_path <- paste(dir, selected_file, sep = '')
```

Golfer selections (total of 6) for each DFS league member are manually typed into a csv file (referencing the DFS website). The csv file is parsed and processed for uploading to the dfs_board table. There can be some complications:

-   the DFS league member's selections can be NA if they forget to select golfers for the contest
-   a DFS league member's a selected player can be missing from the DataGolf.com DFS database if the player withdrew prior to contest start
-   a golfer's name in the DataGolf.com DFS database can be spelled differently from the DataGolf.com player database and/or DFS database
    -   e.g. "van Rooyen, Erik" vs "Van Rooyen, Erik" or "Davis, Cameron" vs "Davis, Cam"

These complications are logged and will not upload to the AWS database if there are unresolved issues. Sometimes, it's a spelling error in the csv. Sometimes, it's a deeper issue that resolves manual changes.

```{r}
#function to change vector to Postgre SQL friendly list
get_sql_list <- function(vec){
  paste('(', paste("'",vec,"'", collapse = ', ', sep = ''), ')', sep = '')
}

#get event from AWS
id_event <- dbGetQuery(conn, paste("SELECT id_event FROM EVENT WHERE calendar_year = ", year, " AND event_id = ", event, sep = ""))

#select the csv with the manually created event board
df_board <- suppressMessages(read_csv(selected_path))

#gather account id
accounts <- dbGetQuery(conn, paste("SELECT username, id_account FROM ACCOUNT WHERE username in ", get_sql_list(df_board$username)))

# #gather event id
# id_event <- dbGetQuery(conn, paste("SELECT id_event FROM EVENT WHERE calendar_year = ", year, " AND event_id = ", event, sep = ""))

#gather dfs totals
df_board_longer <- pivot_longer(df_board, cols = starts_with('id_player_'), names_to = 'id_player', values_to = 'player') %>% mutate(player = ifelse(player == 0, NA, player))
list_unique_players <- (df_board_longer %>% filter(!is.na(player)))$player %>% unique()
dfs_totals <- dbGetQuery(conn, paste("SELECT id_dfs, player.player_name FROM DFS_TOTAL 
                                     INNER JOIN player ON player.dg_id = dfs_total.dg_id 
                                     WHERE dfs_total.id_event = '", id_event$id_event, "' 
                                     AND player.player_name IN ", get_sql_list(list_unique_players), sep = ''))

#account can be NA if user doesn't set a board for the week
#player can be NA if they drop out prior to round starting (they won't appear in the DG DFS report for that event)
#player can be spelled different in DG DFS database e.g. van Rooyen vs Van Rooyen
write_board_to_db <- function(){
  df_board_coverted <- df_board %>% 
  
    #username -> id_account
    left_join(accounts, by = 'username', relationship = 'one-to-one') %>% select(-username) %>% 
    
    #player name -> associated dfs totals id (for each selected player)
    mutate(
      id_dfs_1 = dfs_totals$id_dfs[match(id_player_1, dfs_totals$player_name)],
      id_dfs_2 = dfs_totals$id_dfs[match(id_player_2, dfs_totals$player_name)],
      id_dfs_3 = dfs_totals$id_dfs[match(id_player_3, dfs_totals$player_name)],
      id_dfs_4 = dfs_totals$id_dfs[match(id_player_4, dfs_totals$player_name)],
      id_dfs_5 = dfs_totals$id_dfs[match(id_player_5, dfs_totals$player_name)],
      id_dfs_6 = dfs_totals$id_dfs[match(id_player_6, dfs_totals$player_name)]
    ) %>% 
    select(id_account, id_dfs_1, id_dfs_2, id_dfs_3, id_dfs_4, id_dfs_5, id_dfs_6)
  
  #write to db
  dbWriteTable(conn, 'dfs_board', df_board_coverted , row.names = FALSE, append = TRUE)
  
  #update the weekly payout in the event table
  pay <- dbGetQuery(conn, paste("SELECT dfs_payout FROM event where id_event = '", id_event$id_event, "'", sep = ''))
  if(is.na(pay$dfs_payout)){
    dbSendQuery(conn, paste("
              UPDATE EVENT
              SET
              	DFS_PAYOUT = ", payout, "
              WHERE
              	ID_EVENT = '", id_event$id_event, "';", sep = ''))
  }
  
  #check
  dbGetQuery(conn, "SELECT * FROM dfs_board LIMIT 5")
}

if(length(dfs_totals$player_name) == length(list_unique_players)){
  write_board_to_db()
} else{
  print('error, missing player(s):')
  if(length(dfs_totals$player_name)>length(list_unique_players)){
    missing_players <- setdiff(dfs_totals$player_name,list_unique_players)
  }else{
    missing_players <- setdiff(list_unique_players, dfs_totals$player_name)
  }
  
  print(missing_players)
  
  #check to see if players exist
  sql <- paste("SELECT * 
  FROM player
  WHERE player_name IN ", get_sql_list(missing_players), ";", sep='')
  
  check <- dbGetQuery(conn, sql)
  
  if(length(check$player_name) == length(missing_players)){
    print('adding NAs for players within board since they exist in DB but no DFS scoring exists.  Likely dropout.')
    write_board_to_db()
  }
  else{
    print('check players.  At least one does not exist in database.')
  }
}
```
# Checks and Balances

## Manual Player Checks if Necessary

The following script can be used to cross check golfers within the AWS database vs the DataGolf.com database

```{r}
#check name differentials
# sql <- "SELECT *
# FROM player
# WHERE player_name IN ('Zalatoris, Will', 'Woodland, Gary');"

sql <- "SELECT *
FROM player
WHERE player_name LIKE '%Davis%';"

dbGetQuery(conn, sql)


# (fromJSON(paste('https://feeds.datagolf.com/historical-dfs-data/points?tour=pga',
#                         '&site=fanduel',
#                         '&event_id=', 540,
#                         '&year=', year,
#                         # '&market=',
#                         '&file_format=json&key=', api_key,
#                         sep = '')))$dfs_points %>% arrange(player_name)
```

## Find DFS Event Outcome

After a successful upload to the AWS database, ensure contest standings and point totals match the DFS website.

```{r}
#manually set year and dg event id
# year <- 2025
# event <- 4

#gather db event id
# id_event <- dbGetQuery(conn, paste("SELECT id_event FROM EVENT WHERE calendar_year = ", year, " AND event_id = ", event, sep = ""))

#create query
sql <- paste("SELECT
	ACCOUNT.USERNAME AS USERNAME,
	EVENT.EVENT_NAME,
	EVENT.CALENDAR_YEAR,
	ROUND(SUM(DFS.TOTAL_PTS)::NUMERIC, 1) AS TOTAL_PTS
FROM
	DFS_BOARD
	INNER JOIN ACCOUNT ON ACCOUNT.ID_ACCOUNT = DFS_BOARD.ID_ACCOUNT
	INNER JOIN DFS_TOTAL AS DFS ON DFS.ID_DFS IN (
		DFS_BOARD.ID_DFS_1,
		DFS_BOARD.ID_DFS_2,
		DFS_BOARD.ID_DFS_3,
		DFS_BOARD.ID_DFS_4,
		DFS_BOARD.ID_DFS_5,
		DFS_BOARD.ID_DFS_6
	)
	INNER JOIN EVENT ON EVENT.ID_EVENT = DFS.ID_EVENT
WHERE
	DFS.ID_EVENT = '", id_event$id_event,
"' GROUP BY
	ACCOUNT.USERNAME,
	EVENT.EVENT_NAME,
	EVENT.CALENDAR_YEAR
ORDER BY
	TOTAL_PTS DESC", sep = '')

df_event_outcome <- dbGetQuery(conn, sql)
df_event_outcome
```

## Check Board if Seeing a Difference
```{r}
#create query
sql <- paste("
          SELECT
          	ACCOUNT.USERNAME,
          	EVENT.EVENT_NAME,
          	EVENT.EVENT_ID,
          	EVENT.ID_EVENT,
          	EVENT.DATE,
          	PLAYER.PLAYER_NAME,
          	DFS.TOTAL_PTS
          FROM
          	DFS_BOARD
          	INNER JOIN ACCOUNT ON ACCOUNT.ID_ACCOUNT = DFS_BOARD.ID_ACCOUNT
          	INNER JOIN DFS_TOTAL AS DFS ON DFS.ID_DFS IN (
          		DFS_BOARD.ID_DFS_1,
          		DFS_BOARD.ID_DFS_2,
          		DFS_BOARD.ID_DFS_3,
          		DFS_BOARD.ID_DFS_4,
          		DFS_BOARD.ID_DFS_5,
          		DFS_BOARD.ID_DFS_6
          	)
          	INNER JOIN EVENT ON EVENT.ID_EVENT = DFS.ID_EVENT
          	INNER JOIN PLAYER ON PLAYER.DG_ID = DFS.DG_ID
          WHERE
          	EVENT.ID_EVENT = '", id_event$id_event, "'
          	-- account.USERNAME = 'azaj'
          ORDER BY
          	DATE DESC,
          	TOTAL_PTS DESC", sep = '')

df_board_outcome <- dbGetQuery(conn, sql)
df_board_outcome %>% group_by(username) %>% summarize(username, event_name, event_id, id_event, date, player_name, total_pts) %>% filter(username == 'jwtownse')
```


# Disconnect

```{r}
dbDisconnect(conn)
```
